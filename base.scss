@charset "utf-8";

// 变量
// 变量支持块级作用域，嵌套规则内定义的变量只能在嵌套规则内使用（局部变量），
// 不在嵌套规则内定义的变量则可在任何地方使用（全局变量）。将局部变量转换为全局变量可以添加 !global 声明：
#main {
  $width: 5em !global;
  width: $width;
}

#sidebar {
  width: $width;
}


// 字符串
@mixin firefox-message($select){
	body.firefox #{$select}:before{
		content: 'Hi, Firefox users !';
	}
}

@include firefox-message('.header');


// 运算
p{
	width: 1in + 8pt;
}
/* 
	以下三种情况 / 将被视为除法运算符号：
	如果值，或值的一部分，是变量或者函数的返回值
	如果值被圆括号包裹
	如果值是算数表达式的一部分
 */
p {
  font: 10px/8px;             // Plain CSS, no division
  $width: 1000px;
  width: $width/2;            // Uses a variable, does division
  width: round(1.5)/2;        // Uses a function, does division
  height: (500px/2);          // Uses parentheses, does division
  margin-left: 5px + 8px/2px; // Uses +, does division
}

// 如果需要使用变量，同时又要确保 / 不做除法运算而是完整地编译到 CSS 文件中，只需要用 #{} 插值语句将变量包裹
p {
  $font-size: 12px;
  $line-height: 30px;
  font: #{$font-size}/#{$line-height};
}


// 字符串运算
// + 可用于连接字符串
p{
	cursor: e + -resize;
}

// 如果有引号字符串（位于 + 左侧）连接无引号字符串，运算结果是有引号的，相反，无引号字符串（位于 + 左侧）连接有引号字符串，运算结果则没有引号
// 即是否有引号以加号左侧为基准
p:before {
  content: "Foo " + Bar;
  font-family: sans- + "serif";
}

// 运算表达式与其他值连用时，用空格做连接符
p {
  margin: 3px + 4px auto;
}

// 在有引号的文本字符串中使用 #{} 插值语句可以添加动态的值
p:before {
  content: "I ate #{5 + 10} pies!";
}

// 空的值被视作插入了空字符串
$value: null;
p:before {
  content: "I ate #{$value} pies!";
}


// 父级语句
@mixin does-parent-exist {
  @if & {
    &:hover {
      color: red;
    }
  } @else {
    a {
      color: red;
    }
  }
}

div.slient{
	@include does-parent-exist;
}

@include does-parent-exist;


// 变量定义 !default
// 可以在变量的结尾添加 !default 给一个未通过 !default 声明赋值的变量赋值，此时，如果变量已经被赋值，不会再被重新赋值，但是如果变量还没有被赋值，则会被赋予新的值。
$content: "First content";
$content: "Second content?" !default;
$new_content: "First time reference" !default;

#main {
	$new_content: 'Second time ref !';
  	content: $content;
  	new-content: $new_content;
}

// 变量是 null 空值时将视为未被 !default 赋值。
$content: null;
$content: "Non-null content" !default;

#main {
  content: $content;
}


// 嵌套 @import
// 大多数情况下，一般在文件的最外层（不在嵌套规则内）使用 @import，
// 其实，也可以将 @import 嵌套进 CSS 样式或者 @media 中，与平时的用法效果相同，只是这样导入的样式只能出现在嵌套的层中。


// @media
.sidebar {
  width: 300px;
  @media screen and (orientation: landscape) {
    width: 500px;
  }
}

// @media 的 queries 允许互相嵌套使用，编译时，Sass 自动添加 and
@media screen {
  .sidebar {
    @media (orientation: landscape) {
      width: 500px;
    }
  }
}

// @media 甚至可以使用 SassScript（比如变量，函数，以及运算符）代替条件的名称或者值
$media: screen;
$feature: -webkit-min-device-pixel-ratio;
$value: 1.5;

@media #{$media} and ($feature: $value) {
  .sidebar {
    width: 500px;
  }
}


// @extend
// 延伸复杂的选择器
.hoverlink {
  @extend a:hover;
}
a:hover {
  text-decoration: underline;
}

.hoverlink {
  @extend a:hover;
}
.comment a.user:hover {
  font-weight: bold;
}



// 控制指令
p {
  @if 1 + 1 == 2 { border: 1px solid; }
  @if 5 < 3 { border: 2px dotted; }
  @if null  { border: 3px double; }
}

$type: monster;
p {
  @if $type == ocean {
    color: blue;
  } @else if $type == matador {
    color: red;
  } @else if $type == monster {
    color: green;
  } @else {
    color: black;
  }
}

@for $i from 1 through 3 {
  .item-#{$i} { width: 2em * $i; }
}

@each $animal in puma, sea-slug, egret, salamander {
  .#{$animal}-icon {
    background-image: url('/images/#{$animal}.png');
  }
}

@each $animal, $color, $cursor in (puma, black, default),
                                  (sea-slug, blue, pointer),
                                  (egret, white, move) {
  .#{$animal}-icon {
    background-image: url('/images/#{$animal}.png');
    border: 2px solid $color;
    cursor: $cursor;
  }
}

@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
  #{$header} {
    font-size: $size;
  }
}

$i: 6;
@while $i > 0 {
  .item-#{$i} { width: 2em * $i; }
  $i: $i - 2;
}


// 混合指令
@mixin large-text {
  font: {
    family: Arial;
    size: 20px;
    weight: bold;
  }
  color: #ff0000;
}

.page-title {
  @include large-text;
  padding: 4px;
  margin-top: 10px;
}

@mixin silly-links {
  a {
    color: blue;
    background-color: red;
  }
}
@include silly-links;

// 混合样式中也可以包含其他混合样式，比如
@mixin compound {
  @include highlighted-background;
  @include header-text;
}
@mixin highlighted-background { background-color: #fc0; }
@mixin header-text { font-size: 20px; }


// 指令参数及默认参数
@mixin sexy-border($color, $width) {
  border: {
    color: $color;
    width: $width;
    style: dashed;
  }
}
p { @include sexy-border(blue, 1in); }

@mixin sexy-border($color, $width: 1in) {
  border: {
    color: $color;
    width: $width;
    style: dashed;
  }
}
p { @include sexy-border(blue); }
h1 { @include sexy-border(blue, 2in); }

/* 关键词参数 */
p { @include sexy-border($color: blue); }
h1 { @include sexy-border($width: 2in, $color: pink); }


// 参数变量
@mixin box-shadow($shadows...) {
  -moz-box-shadow: $shadows;
  -webkit-box-shadow: $shadows;
  box-shadow: $shadows;
}
.shadows {
  @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);
}

@mixin colors($text, $background, $border) {
  color: $text;
  background-color: $background;
  border-color: $border;
}
$values: #ff0000, #00ff00, #0000ff;
.primary {
  @include colors($values...);
}



